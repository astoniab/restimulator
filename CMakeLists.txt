CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
IF(COMMAND CMAKE_POLICY)
	CMAKE_POLICY(SET CMP0003 OLD)
ENDIF(COMMAND CMAKE_POLICY)

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
	
PROJECT(restimulator)

SET(RESTIMULATOR_SRC
src/cameracapturethread.cpp
src/global.cpp
src/guithread.cpp
src/ithread.cpp
src/main.cpp
src/opencvfunctions.cpp
src/posedetectorthread.cpp
src/posekeypointdata.cpp
src/restimconnection.cpp
src/restimtcpconnection.cpp
src/tcodegenerator.cpp
)

SET(RESTIMULATOR_PLATFORM_SRC )

IF(WIN32)
	SET(RESTIMULATOR_SRC ${RESTIMULATOR_SRC}
	)
ENDIF(WIN32)

ADD_EXECUTABLE(restimulator ${RESTIMULATOR_SRC} ${RESTIMULATOR_PLATFORM_SRC})

TARGET_COMPILE_FEATURES(restimulator PRIVATE cxx_std_17)

ADD_COMPILE_DEFINITIONS(_USE_MATH_DEFINES)

IF(WIN32)
	ADD_COMPILE_DEFINITIONS(WIN32_LEAN_AND_MEAN)
	ADD_COMPILE_DEFINITIONS(_CRT_SECURE_NO_WARNINGS)
ENDIF(WIN32)

FIND_LIBRARY(OPENCV_LIBRARY NAMES opencv)
IF(OPENCV_LIBRARY)
	TARGET_LINK_LIBRARIES(restimulator ${OPENCV_LIBRARY})
ELSE(OPENCV_LIBRARY)
	MESSAGE(FATAL_ERROR "Could not find OpenCV library.")
ENDIF(OPENCV_LIBRARY)

FIND_LIBRARY(NANA_LIBRARY NAMES nana)
IF(NANA_LIBRARY)
	TARGET_LINK_LIBRARIES(restimulator ${NANA_LIBRARY})
ELSE(NANA_LIBRARY)
	MESSAGE(FATAL_ERROR "Could not find nana library.")
ENDIF(NANA_LIBRARY)

FIND_LIBRARY(ONNX_RUNTIME_LIBRARY NAMES onnxruntime onnx)
IF(ONNX_RUNTIME_LIBRARY)
	TARGET_LINK_LIBRARIES(restimulator ${ONNX_RUNTIME_LIBRARY})
ELSE(ONNX_RUNTIME_LIBRARY)
	MESSAGE(FATAL_ERROR "Could not find Onnx Runtime library.")
ENDIF(ONNX_RUNTIME_LIBRARY)
